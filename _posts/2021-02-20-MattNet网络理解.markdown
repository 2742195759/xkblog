---
layout : post
title  : MattNet 网络理解
date   : 2021-02-20 5:33:00 +0000
category : DL
typora-copy-images-to: ../../../code/xkblog/public/img/
typora-root-url: ../../../code
---

#### 当前难点：

1. 需要高阶和低阶语义信息： 如何在ProposalNet 网络中添加C3和C4两个阶段的特征？？修改ProposalNet网络吗？
2. 需要找到FasterRCNN中同类物体的所有信息： 如何在ProposalNet中找到对应物体的框？？需要提前熟悉一下FasterRCNN
3. **<font color='red'>Attribute Predict 模块:</font> 看他的实现，好像可以直接加入这个模块。（这个模块可以作为图卷积模块的创新点）**
4. **<font color='red'>引入Transformer: </font> 原来的论文使用的是普通的Attention网络和LSTM。尝试引入Transformer作为创新点**

#### 当前研究点：

1. 数据集中加入 Attribute Predict 模块支持。
2. SCRC 中加入 Attribute Predict 模块 -- 查看这个模块是否可以改善原来的 SCRC 模型，消融分析。得到结果如果效果好，加入到 GraphRefer 模型中。

#### <font color='green'> 对Attribute Predict的研究：</font>

``` 
# 下面是对 parse.json 文件的[0]的输出 len() == 100
{
  'tokens': ['the', 'lady', 'with', 'the', 'blue', 'shirt'], 
 	'raw': 'THE LADY WITH THE BLUE SHIRT',  
  'sent_id': 0, 
  'sent': 'the lady with the blue shirt',
  'parse': {'parsetree': '(ROOT (NP (NP (DT the) (NN lady)) (PP (IN with) (NP (DT the) (JJ blue) (NN shirt)))))', 'text': 'the lady with the blue shirt', 'dependencies': [['root', 'ROOT', 'lady'], ['det', 'lady', 'the'], ['det', 'shirt', 'the'], ['amod', 'shirt', 'blue'], ['prep_with', 'lady', 'shirt']], 'indexeddependencies': [['root', 'ROOT-0', 'lady-2'], ['det', 'lady-2', 'the-1'], ['det', 'shirt-6', 'the-4'], ['amod', 'shirt-6', 'blue-5'], ['prep_with', 'lady-2', 'shirt-6']], 'words': [['the', {'NamedEntityTag': 'O', 'CharacterOffsetEnd': '3', 'Lemma': 'the', 'PartOfSpeech': 'DT', 'CharacterOffsetBegin': '0'}], ['lady', {'NamedEntityTag': 'O', 'CharacterOffsetEnd': '8', 'Lemma': 'lady', 'PartOfSpeech': 'NN', 'CharacterOffsetBegin': '4'}], ['with', {'NamedEntityTag': 'O', 'CharacterOffsetEnd': '13', 'Lemma': 'with', 'PartOfSpeech': 'IN', 'CharacterOffsetBegin': '9'}], ['the', {'NamedEntityTag': 'O', 'CharacterOffsetEnd': '17', 'Lemma': 'the', 'PartOfSpeech': 'DT', 'CharacterOffsetBegin': '14'}], ['blue', {'NamedEntityTag': 'O', 'CharacterOffsetEnd': '22', 'Lemma': 'blue', 'PartOfSpeech': 'JJ', 'CharacterOffsetBegin': '18'}], ['shirt', {'NamedEntityTag': 'O', 'CharacterOffsetEnd': '28', 'Lemma': 'shirt', 'PartOfSpeech': 'NN', 'CharacterOffsetBegin': '23'}]]}
}
```

```
# 下面是对 refer-parser2/cache/parsed_atts/refcoco_unc/sents.json 文件
# 的json[0]['atts'] 的输出. len(json) == 142210
{
	'r4': ['none'], 
	'r5': ['prep_with'], 
	'r6': ['shirt'], 
	'r7': ['none'], 
	'r1': ['lady'], 
	'r2': ['none'], 
	'r3': ['none'], 
	'r8': ['blue']
}
```

可以看到，parse.word = [[...],[...]]很重要，然后JJ DT NN IN等是语法词汇，可以见链接： [PartOfSpeech](https://blog.csdn.net/LYJXCZ/article/details/17082341)  其中有各种名词表示的含义。例如JJ表示名词形容词，这个可以作为 attribute 的关键。

其次，在refer-parser 中应用了一个template parser的工具，见论文中引用[13]。这个工具的接受parse.json中的格式，输出sents.json格式，然后其中的不同的r1 - r8 的关系是如下：我们可以直接使用atts 中的信息的某一些作为 attribute tag。同时插入到我们xkcv2的 referit.dataset 中。下面是r1 - r8 原文的解释

> ##### from refer-parser
>
>Specifically, r1 = entry-level name, r2 = color, r3 = size, r4 = abs. location,
>r5 = rel. location, r6 = rel. object, r7 = generic, r8 = the left words

**在 MattNet文章中提到，我们使用 color and generic attribute with low-frequency words removed 来作为 attribute 。其实也就是 r1 和 r7 作为attribute关键词，然后过滤低频名词。注意加上Balanced Strategy。<font color='orange'>其实作为尝试，我们可以直接过滤 JJ 和 NN 来作为关键词，因为 r2 中感觉很多颜色名词都没有被搜集（虽然可能是名词不直接形容主体）</font>**

##### Code + 具体实现 + 解析：

在论文中，对Attribute Predict 分支的描述是下图的左边部分：

<div align='center'><img src="/xkblog/public/img/截屏2021-02-24 下午5.48.52.png" alt="截屏2021-02-24 下午5.48.52" style="zoom:50%;" /></div>

代码中，对于Attribute Prediction过程中，其中使用的是Resnet fc7(n, 2048, 7, 7) 和 pool5(n, 1024, 7, 7) 两个层次的信息。分别对应的就是上面的两个blob，然后使用 1x1 的卷机操作。最后的 avg.pooling 应该是 Global Average Pooling。而GAP和AP其实本质相同，唯一的不同是窗口的大小，GAP是窗口大小是Feature Map大小的AP。

```python
att_feats = self.att_fuse(torch.cat([pool5, fc7], 1))   # n x 49 x 512
# self.att_fuse 是全连接 + BatchNorm + ReLU
avg_att_feats = att_feats.view(batch, -1, 512).mean(1)  # n x 512
avg_att_feats = nn.Dropout(0.3)(avg_att_feats)   # 在加上一层 Dropout
att_scores = self.att_fc(avg_att_feats)    # output. # n x num_att
```

```mermaid
graph LR
	A[<font color='red'>Feature</font>] --> B[FC] --> C[BatchNorm] --> D(ReLU) --> E[Dropout] --> F(FC) --> G(<font color='red'>Score</font>)
	
```

#### MaskRCNN 特征提取过程（放弃）

[github 库地址](https://github.com/lichengunc/MAttNet)：这个库是MattNet的库地址，决定使用他的预处理方法来进行预处理。然后更改自己的ReferitDataset从这个数据集读取数据。将自己的模型分为2个部分，一个是Preprocess，一个是Training，一个是Inference。然后使用预先训练好的 mrcn 模型来进行特征提取。提取之后存储入h5文件。然后在Referit 数据集合中只需要使用基本的读取操作即可。通过这个方法，我们可以将 Referit 的数据集处理分离，专注 训练部分。 

⚠️：教训得到，使用别人的预处理绝对比自己从头写好！！尤其是使用了别的模型作为预处理。除非是很简单的DataLoader比如推荐系统的陈博的。我们的 模型文件夹 只需要负责加入预处理脚本，同时对数据进行重新封装一下即可。新建一个DataLoader 名为 ReferitMrcn 来进行MattNet的开发。

⚠️：我的看法改变了。各种bug我真的是烦死了。果然只要有C++就会有bug。果然还是docker好啊。安装啥的太麻烦了。但是运行不了docker啊

⚠️：我放弃了，安装这个MaskRCNN真的是有毒一样。为什么他们用的版本那么老。就各种出问题。我直接在自己的Cvpack2里面实现吧。Cvpack2至少安装没啥问题了。我看懂提取的特征，然后使用FasterRCNN模拟吧。MaskRCNN再说吧。

#### Cvpack2  Resnet  输出 Head Feature ： 1 x 1024 x H x W 

接下来我们研究 Cvpack2中的Resnet如何提取出 mrcn 中需要的 Head Feature。其实也就是 ROI Pooling 前的feature，格式是 1 x 1024 x H x W 。应该在 ProposalNet中可以得到

###### torch.nn.AdaptiveAvgPool2d((H, W)) ： 

- 这个函数很有趣，以后AvgPool2D就用这个代替，其中H,W是所需要的输出，然后会自动给你设置Kernel 和 Stride。如果H=W=1 ，表示GlobalAveragePooling。

##### Cvpack2 Backbone 

文件夹：cvpack2/modeling/backbone/ 文件夹下

```
class Backbone : 
- forward
- output_shape (输出self._output_features中name对应的)
	例如： 

>>> self.backbone.bottom_up.output_shape()
{'res2': ShapeSpec(channels=256, height=None, width=None, stride=4), 'res3': ShapeSpec(channels=512, height=None, width=None, stride=8), 'res4': ShapeSpec(channels=1024, height=None, width=None, stride=16), 'res5': ShapeSpec(channels=2048, height=None, width=None, stride=32)}
```

```
class ResNet : 
源文件:cvpack2/modeling/backbone/resnet.py
```

###### 更改 ResNet 的配置常用: 

```
# 更改输出的层 
# 可以是 stem | res2 | res3 | res4(也就是head: 1024) | res5(2048) | linear
# 然后一些展示: 
out_features = cfg.MODEL.RESNETS.OUT_FEATURES 

# 更改输出类
num_classes = cfg.MODEL.RESNETS.NUM_CLASSES   
```

###### 创建ResNet方法：

```python
# Example from cvpack2/modeling/backbone/fpn.py
from .resnet import build_resnet_backbone 
bottom_up = build_resnet_backbone(cfg, input_shape)
```

###### 为 ProposalNet 添加 category_id 关键字





